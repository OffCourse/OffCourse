{
  "service": {
    "service": "public-badges",
    "serviceObject": {
      "name": "public-badges"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*?]+?)}",
      "name": "aws",
      "runtime": "nodejs10.x",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetObject",
            "s3:PutObject",
            "s3:PutObjectAcl"
          ],
          "Resource": [
            "arn:aws:s3:::public-badges-registry-dev",
            "arn:aws:s3:::public-badges-registry-dev/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "events:PutEvents"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:*:table/registry-lookup-dev",
            "arn:aws:dynamodb:us-east-1:*:table/registry-lookup-dev/index/*"
          ]
        }
      ],
      "region": "us-east-1",
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GraphqlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/public-badges-dev-graphql"
            }
          },
          "SaveOrganizationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/public-badges-dev-saveOrganization"
            }
          },
          "ApproveOrganizationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/public-badges-dev-approveOrganization"
            }
          },
          "UpdateRegistryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/public-badges-dev-updateRegistry"
            }
          },
          "EchoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/public-badges-dev-echo"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "public-badges",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/public-badges-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/public-badges-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "public-badges",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GraphqlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/public-badges/dev/1578435077613-2020-01-07T22:11:17.613Z/public-badges.zip"
              },
              "FunctionName": "public-badges-dev-graphql",
              "Handler": "dist/index.graphql",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGISTRY_BUCKET": "public-badges-registry-dev",
                  "HANDLER_NAME": "public-badges.api",
                  "REGISTRY_LOOKUP_TABLE": "registry-lookup-dev",
                  "ORGANIZATION_STATUS_INDEX": "organization-status-dev"
                }
              }
            },
            "DependsOn": [
              "GraphqlLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GraphqlLambdaVersionI81LEtadUi7EKBE1UkMMpYiY2WzctMQNK1GgwIdlS0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GraphqlLambdaFunction"
              },
              "CodeSha256": "oGEKdE1QHiWKxmARUpYvJGodoyfEuOAS8K5uJo5a4B0="
            }
          },
          "SaveOrganizationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/public-badges/dev/1578435077613-2020-01-07T22:11:17.613Z/public-badges.zip"
              },
              "FunctionName": "public-badges-dev-saveOrganization",
              "Handler": "dist/index.saveOrganization",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGISTRY_BUCKET": "public-badges-registry-dev",
                  "HANDLER_NAME": "public-badges.save-organization"
                }
              }
            },
            "DependsOn": [
              "SaveOrganizationLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "SaveOrganizationLambdaVersionOmJkLCQt5SSin0AqQ16HVTdb2XzNjcCsKSsAIyNr2oQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SaveOrganizationLambdaFunction"
              },
              "CodeSha256": "oGEKdE1QHiWKxmARUpYvJGodoyfEuOAS8K5uJo5a4B0="
            }
          },
          "ApproveOrganizationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/public-badges/dev/1578435077613-2020-01-07T22:11:17.613Z/public-badges.zip"
              },
              "FunctionName": "public-badges-dev-approveOrganization",
              "Handler": "dist/index.approveOrganization",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "HANDLER_NAME": "public-badges.approve-organization"
                }
              }
            },
            "DependsOn": [
              "ApproveOrganizationLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "ApproveOrganizationLambdaVersionw0FKgmIbhKdnYVYIrsCMYozp7Ei9tLDmFBOU2QlZab4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApproveOrganizationLambdaFunction"
              },
              "CodeSha256": "oGEKdE1QHiWKxmARUpYvJGodoyfEuOAS8K5uJo5a4B0="
            }
          },
          "UpdateRegistryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/public-badges/dev/1578435077613-2020-01-07T22:11:17.613Z/public-badges.zip"
              },
              "FunctionName": "public-badges-dev-updateRegistry",
              "Handler": "dist/index.updateRegistry",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGISTRY_LOOKUP_TABLE": "registry-lookup-dev",
                  "HANDLER_NAME": "public-badges.update-registry-lookup"
                }
              }
            },
            "DependsOn": [
              "UpdateRegistryLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "UpdateRegistryLambdaVersionhGTPeFHR7XnjwgVo6jLmcTUy9KXAt0B28YTpVl9QZ8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateRegistryLambdaFunction"
              },
              "CodeSha256": "oGEKdE1QHiWKxmARUpYvJGodoyfEuOAS8K5uJo5a4B0="
            }
          },
          "EchoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/public-badges/dev/1578435077613-2020-01-07T22:11:17.613Z/public-badges.zip"
              },
              "FunctionName": "public-badges-dev-echo",
              "Handler": "dist/index.echo",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs10.x",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "HANDLER_NAME": "public-badges.echo"
                }
              }
            },
            "DependsOn": [
              "EchoLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "EchoLambdaVersionAtdKntpo1cS3RydiuqsRmsDx59SUlhvBB9wzdJXjg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EchoLambdaFunction"
              },
              "CodeSha256": "oGEKdE1QHiWKxmARUpYvJGodoyfEuOAS8K5uJo5a4B0="
            }
          },
          "S3BucketPublicbadgesregistrydev": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "public-badges-registry-dev",
              "NotificationConfiguration": {
                "LambdaConfigurations": [
                  {
                    "Event": "s3:ObjectCreated:*",
                    "Function": {
                      "Fn::GetAtt": [
                        "EchoLambdaFunction",
                        "Arn"
                      ]
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "EchoLambdaPermissionPublicbadgesregistrydevS3"
            ]
          },
          "EchoLambdaPermissionPublicbadgesregistrydevS3": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EchoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "s3.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":s3:::public-badges-registry-dev"
                  ]
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-public-badges",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceGraphql": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "graphql",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlayground": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "playground",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGraphqlOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGraphql"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlaygroundOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlayground"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGraphqlPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGraphql"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GraphqlLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodGraphqlGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGraphql"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GraphqlLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPlaygroundAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlayground"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GraphqlLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1578435058473": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodGraphqlOptions",
              "ApiGatewayMethodPlaygroundOptions",
              "ApiGatewayMethodGraphqlPost",
              "ApiGatewayMethodGraphqlGet",
              "ApiGatewayMethodPlaygroundAny"
            ]
          },
          "GraphqlLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GraphqlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SaveOrganizationCustomEventBridge1": {
            "Type": "Custom::EventBridge",
            "Version": 1,
            "DependsOn": [
              "SaveOrganizationLambdaFunction",
              "CustomDashresourceDasheventDashbridgeLambdaFunction"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDasheventDashbridgeLambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "public-badges-dev-saveOrganization",
              "EventBridgeConfig": {
                "RuleName": "public-badges-dev-saveOrganization-rule-1",
                "Pattern": {
                  "source": [
                    "public-badges.api",
                    "public-badges.approve-organization"
                  ],
                  "detail-type": [
                    "ORGANIZATION_REGISTRATION_REQUESTED",
                    "ORGANIZATION_APPROVAL_ACCEPTED"
                  ]
                }
              }
            }
          },
          "ApproveOrganizationCustomEventBridge1": {
            "Type": "Custom::EventBridge",
            "Version": 1,
            "DependsOn": [
              "ApproveOrganizationLambdaFunction",
              "CustomDashresourceDasheventDashbridgeLambdaFunction"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDasheventDashbridgeLambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "public-badges-dev-approveOrganization",
              "EventBridgeConfig": {
                "RuleName": "public-badges-dev-approveOrganization-rule-1",
                "Pattern": {
                  "source": [
                    "public-badges.save-organization"
                  ],
                  "detail-type": [
                    "ORGANIZATION_APPROVAL_REQUESTED"
                  ]
                }
              }
            }
          },
          "UpdateRegistryCustomEventBridge1": {
            "Type": "Custom::EventBridge",
            "Version": 1,
            "DependsOn": [
              "UpdateRegistryLambdaFunction",
              "CustomDashresourceDasheventDashbridgeLambdaFunction"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDasheventDashbridgeLambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "public-badges-dev-updateRegistry",
              "EventBridgeConfig": {
                "RuleName": "public-badges-dev-updateRegistry-rule-1",
                "Pattern": {
                  "source": [
                    "public-badges.api",
                    "public-badges.approve-organization"
                  ],
                  "detail-type": [
                    "ORGANIZATION_REGISTRATION_REQUESTED",
                    "ORGANIZATION_APPROVAL_ACCEPTED"
                  ]
                }
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "public-badges",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:events",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "rule/public-badges-dev-saveOrganization-rule-1"
                            ]
                          ]
                        },
                        "Action": [
                          "events:PutRule",
                          "events:RemoveTargets",
                          "events:PutTargets",
                          "events:DeleteRule"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:lambda",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "function",
                              "public-badges-dev-saveOrganization"
                            ]
                          ]
                        },
                        "Action": [
                          "lambda:AddPermission",
                          "lambda:RemovePermission"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:events",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "rule/public-badges-dev-approveOrganization-rule-1"
                            ]
                          ]
                        },
                        "Action": [
                          "events:PutRule",
                          "events:RemoveTargets",
                          "events:PutTargets",
                          "events:DeleteRule"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:lambda",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "function",
                              "public-badges-dev-approveOrganization"
                            ]
                          ]
                        },
                        "Action": [
                          "lambda:AddPermission",
                          "lambda:RemovePermission"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:events",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "rule/public-badges-dev-updateRegistry-rule-1"
                            ]
                          ]
                        },
                        "Action": [
                          "events:PutRule",
                          "events:RemoveTargets",
                          "events:PutTargets",
                          "events:DeleteRule"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn:aws:lambda",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "function",
                              "public-badges-dev-updateRegistry"
                            ]
                          ]
                        },
                        "Action": [
                          "lambda:AddPermission",
                          "lambda:RemovePermission"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDasheventDashbridgeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/public-badges/dev/1578435077613-2020-01-07T22:11:17.613Z/custom-resources.zip"
              },
              "FunctionName": "public-badges-dev-custom-resource-event-bridge",
              "Handler": "eventBridge/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs12.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "registryTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "registry-lookup-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "organizationId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "identityType",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "identityKey",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "approvalStatus",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "identityKey",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "identityType",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "organization-status-dev",
                  "KeySchema": [
                    {
                      "AttributeName": "approvalStatus",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "organizationId",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "NonKeyAttributes": [],
                    "ProjectionType": "KEYS_ONLY"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "GraphqlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GraphqlLambdaVersionI81LEtadUi7EKBE1UkMMpYiY2WzctMQNK1GgwIdlS0"
            }
          },
          "SaveOrganizationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SaveOrganizationLambdaVersionOmJkLCQt5SSin0AqQ16HVTdb2XzNjcCsKSsAIyNr2oQ"
            }
          },
          "ApproveOrganizationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApproveOrganizationLambdaVersionw0FKgmIbhKdnYVYIrsCMYozp7Ei9tLDmFBOU2QlZab4"
            }
          },
          "UpdateRegistryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateRegistryLambdaVersionhGTPeFHR7XnjwgVo6jLmcTUy9KXAt0B28YTpVl9QZ8"
            }
          },
          "EchoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EchoLambdaVersionAtdKntpo1cS3RydiuqsRmsDx59SUlhvBB9wzdJXjg"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "registry_bucket": "public-badges-registry-dev",
      "api": "public-badges.api",
      "save_organization": "public-badges.save-organization",
      "approve_organization": "public-badges.approve-organization",
      "update_registry_lookup": "public-badges.update-registry-lookup",
      "registry_lookup_table": "registry-lookup-dev",
      "organization-status-index": "organization-status-dev"
    },
    "pluginsData": {},
    "functions": {
      "graphql": {
        "handler": "dist/index.graphql",
        "events": [
          {
            "http": {
              "path": "graphql",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "graphql",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "playground",
              "method": "any",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "ANY"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "REGISTRY_BUCKET": "public-badges-registry-dev",
          "HANDLER_NAME": "public-badges.api",
          "REGISTRY_LOOKUP_TABLE": "registry-lookup-dev",
          "ORGANIZATION_STATUS_INDEX": "organization-status-dev"
        },
        "name": "public-badges-dev-graphql",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "saveOrganization": {
        "handler": "dist/index.saveOrganization",
        "events": [
          {
            "eventBridge": {
              "pattern": {
                "source": [
                  "public-badges.api",
                  "public-badges.approve-organization"
                ],
                "detail-type": [
                  "ORGANIZATION_REGISTRATION_REQUESTED",
                  "ORGANIZATION_APPROVAL_ACCEPTED"
                ]
              }
            }
          }
        ],
        "environment": {
          "REGISTRY_BUCKET": "public-badges-registry-dev",
          "HANDLER_NAME": "public-badges.save-organization"
        },
        "name": "public-badges-dev-saveOrganization",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "approveOrganization": {
        "handler": "dist/index.approveOrganization",
        "events": [
          {
            "eventBridge": {
              "pattern": {
                "source": [
                  "public-badges.save-organization"
                ],
                "detail-type": [
                  "ORGANIZATION_APPROVAL_REQUESTED"
                ]
              }
            }
          }
        ],
        "environment": {
          "HANDLER_NAME": "public-badges.approve-organization"
        },
        "name": "public-badges-dev-approveOrganization",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "updateRegistry": {
        "handler": "dist/index.updateRegistry",
        "events": [
          {
            "eventBridge": {
              "pattern": {
                "source": [
                  "public-badges.api",
                  "public-badges.approve-organization"
                ],
                "detail-type": [
                  "ORGANIZATION_REGISTRATION_REQUESTED",
                  "ORGANIZATION_APPROVAL_ACCEPTED"
                ]
              }
            }
          }
        ],
        "environment": {
          "REGISTRY_LOOKUP_TABLE": "registry-lookup-dev",
          "HANDLER_NAME": "public-badges.update-registry-lookup"
        },
        "name": "public-badges-dev-updateRegistry",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {}
      },
      "echo": {
        "handler": "dist/index.echo",
        "events": [
          {
            "s3": "public-badges-registry-dev"
          }
        ],
        "environment": {
          "HANDLER_NAME": "public-badges.echo"
        },
        "name": "public-badges-dev-echo",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs10.x",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "registryTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "registry-lookup-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "organizationId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "identityType",
                "AttributeType": "S"
              },
              {
                "AttributeName": "identityKey",
                "AttributeType": "S"
              },
              {
                "AttributeName": "approvalStatus",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "identityKey",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "identityType",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "organization-status-dev",
                "KeySchema": [
                  {
                    "AttributeName": "approvalStatus",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "organizationId",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "NonKeyAttributes": [],
                  "ProjectionType": "KEYS_ONLY"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "artifact": "/Users/yeehaa/Documents/offcourse/projects/public-badges/services/api/.serverless/public-badges.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/public-badges/dev/1578435077613-2020-01-07T22:11:17.613Z",
    "artifact": "public-badges.zip"
  }
}